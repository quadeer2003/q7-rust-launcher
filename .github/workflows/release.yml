name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: q7-launcher
            asset_name: q7-launcher-linux-x86_64
            archive_cmd: tar -czf
            archive_ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: q7-launcher.exe
            asset_name: q7-launcher-windows-x86_64
            archive_ext: zip
          - os: ubuntu-latest
            target: x86_64-pc-windows-gnu
            artifact_name: q7-launcher.exe
            asset_name: q7-launcher-windows-x86_64-cross
            archive_ext: zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-mingw-w64-x86-64
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
            sudo apt-get update
            sudo apt-get install -y libxcb1-dev libxrandr-dev libxss-dev libxcursor-dev libxcomposite-dev libasound2-dev libxi-dev libxtst-dev libxkbcommon-dev
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            choco install zip -y
          fi

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare release directory
        shell: bash
        run: |
          mkdir -p release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/
            if [ -d assets ]; then cp -r assets release/; fi
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/
            if [ -d assets ]; then cp -r assets release/; fi
          fi

      - name: Create archive (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          cd release
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ]; then
            tar -czf ../${{ matrix.asset_name }}.${{ matrix.archive_ext }} *
          else
            zip -r ../${{ matrix.asset_name }}.${{ matrix.archive_ext }} *
          fi

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cd release
          zip -r ../${{ matrix.asset_name }}.${{ matrix.archive_ext }} *

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ matrix.asset_name }}.${{ matrix.archive_ext }}
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
